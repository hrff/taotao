package com.taotao.service.


import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.jms.core.MessageCreator;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import javax.jms.*;
import java.util.Date;
import java.util.List;

@Service
public class ItemServiceImpl implements ItemService {

    @Autowired
    private TbItemMapper itemMapper;
    @Autowired
    private TbItemDescMapper itemDescMapper;
    @Autowired
    private JmsTemplate jmsTemplate;
    @Resource
    private Destination topicDestination;
    @Autowired
    private JedisClient jedisClient;

    @Value("${REDIS_ITEM_PRE}")
    private String REDIS_ITEM_PRE;
    @Value("${ITEM_CACHE_EXPIRE}")
    private Integer ITEM_CACHE_EXPIRE;

    @Override
    public TbItem getItemById(long id) {
        try{
            String json=jedisClient.get(REDIS_ITEM_PRE+":"+id+":BASE");
            if (StringUtils.isNotBlank(json)){
                TbItem tbItem= JsonUtils.jsonToPojo(json,TbItem.class);
                return tbItem;
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        TbItem item = itemMapper.selectByPrimaryKey(id);
        try{
            if (item!=null){
                jedisClient.set(REDIS_ITEM_PRE+":"+id+":BASE",JsonUtils.objectToJson(item));
               //设置过期时间
                jedisClient.expire(REDIS_ITEM_PRE+":"+id+":BASE",ITEM_CACHE_EXPIRE);
            }
        }catch (Exception e)
        {
            e.printStackTrace();
        }
        return item;
    }

    @Override
    public E3Result findItemDescById(Long id) {
        try{
            String json=jedisClient.get(REDIS_ITEM_PRE+":"+id+":DESC");
            if (StringUtils.isNotBlank(json)){
                TbItemDesc tbItemDesc= JsonUtils.jsonToPojo(json,TbItemDesc.class);
                return E3Result.ok(tbItemDesc);
            }
        }catch (Exception e)
        {
            e.printStackTrace();
        }
        TbItemDesc itemDesc=itemDescMapper.selectByPrimaryKey(id);
        try{
            jedisClient.set(REDIS_ITEM_PRE+":"+id+":DESC",JsonUtils.objectToJson(itemDesc));
            jedisClient.expire(REDIS_ITEM_PRE+":"+id+":DESC",ITEM_CACHE_EXPIRE);
        } catch (Exception e)
        {
            e.printStackTrace();
        }
        return E3Result.ok(itemDesc);
    }

    @Override
    public EasyUIDataGridResult getItemList(int page, int rows) {
        //设置分页信息
        PageHelper.startPage(page, rows);
        //执行查询
        TbItemExample example = new TbItemExample();
        List<TbItem> list = itemMapper.selectByExample(example);
        //取分页信息
        PageInfo<TbItem> pageInfo = new PageInfo<>(list);

        //创建返回结果对象
        EasyUIDataGridResult result = new EasyUIDataGridResult();
        Long total=pageInfo.getTotal();
        result.setTotal(total.intValue());
        result.setRows(list);

        return result;
    }

    @Override
    public E3Result addItem(TbItem tbItem, String desc) {
        //插入商品id
        tbItem.setId(IDUtils.genItemId());
        //补全状态 1-正常 2-下架 3-删除
        tbItem.setStatus((byte)1);
        //补全创建时间和更新时间
        Date date=new Date();
        tbItem.setCreated(date);
        tbItem.setUpdated(date);
        //插入创建数据
        itemMapper.insert(tbItem);
        //创建商品的描述对象
        TbItemDesc itemDesc=new TbItemDesc();
        itemDesc.setItemId(tbItem.getId());
        itemDesc.setItemDesc(desc);
        itemDesc.setCreated(date);
        itemDesc.setUpdated(date);
        itemDescMapper.insert(itemDesc);
        final long itemId=tbItem.getId();
        jmsTemplate.send(topicDestination, new MessageCreator() {

            @Override
            public Message createMessage(Session session) throws JMSException {
                TextMessage textMessage = session.createTextMessage(itemId+"");
                return textMessage;
            }
        });
        return E3Result.ok();
    }

    @Override
    public E3Result updateItem( TbItem tbItem, String desc) {
        //补全更新时间
        Date date=new Date();
        tbItem.setUpdated(date);
        //插入创建数据
        itemMapper.updateByPrimaryKeySelective(tbItem);
        if (desc!=null||!desc.equals("")) {
            //创建商品的描述对象
            TbItemDesc itemDesc = new TbItemDesc();
            itemDesc.setItemDesc(desc);
            itemDesc.setUpdated(date);
            TbItemDescExample example=new TbItemDescExample();
            TbItemDescExample.Criteria criteria = example.createCriteria();
            criteria.andItemIdEqualTo(tbItem.getId());
            itemDescMapper.updateByExampleSelective(itemDesc,example);
        }

        return E3Result.ok();
    }

    @Override
    public E3Result deleteItem( String ids) {
        String[] idss=ids.split(",");
        for (String id:idss)
        {
            itemMapper.deleteByPrimaryKey(Long.parseLong(id));

            TbItemDescExample example=new TbItemDescExample();
            TbItemDescExample.Criteria criteria=example.createCriteria();
            criteria.andItemIdEqualTo(Long.parseLong(id));
            itemDescMapper.deleteByExample(example);
        }

        return E3Result.ok();
    }

    @Override
    public E3Result updateInstockItem(String ids) {
        instockAndReshelf(ids,2);
        return E3Result.ok();
    }

    @Override
    public E3Result updateReshelfItem(String ids) {
        instockAndReshelf(ids,1);
        return E3Result.ok();
    }


    //商品上下架操作功能实现
    private void instockAndReshelf(String ids,int status){
        String[] idss=ids.split(",");
        for (String id:idss) {
            TbItem item=new TbItem();
            item.setId(Long.parseLong(id));
            //补全状态 1-正常 2-下架 3-删除
            item.setStatus((byte)status);
            itemMapper.updateByPrimaryKeySelective(item);
        }
    }
}
